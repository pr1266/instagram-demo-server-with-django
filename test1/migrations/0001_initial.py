# Generated by Django 3.0 on 2019-12-19 00:31

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='A_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Accessory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('describ', models.TextField()),
                ('price', models.IntegerField(default=0)),
                ('picture', models.ImageField(upload_to='pic_folder/')),
                ('accessoryCat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.A_Category')),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=300, null=True)),
                ('postal_code', models.CharField(max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100, null=True)),
                ('nat_code', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='G_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('describ', models.TextField()),
                ('price', models.IntegerField(default=0)),
                ('picture', models.ImageField(upload_to='pic_folder/')),
                ('gameCat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.G_Category')),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Customer')),
                ('gameEntity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Game')),
            ],
        ),
        migrations.CreateModel(
            name='GameDelivery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Address')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.GameOrder')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='gamePlt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Platform'),
        ),
        migrations.AddField(
            model_name='address',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.City'),
        ),
        migrations.CreateModel(
            name='AccessoryOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessoryEntity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Accessory')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='AccessoryDelivery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Address')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.AccessoryOrder')),
            ],
        ),
        migrations.AddField(
            model_name='accessory',
            name='accessoryPlt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test1.Platform'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=250, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=250)),
                ('role', models.CharField(max_length=250, null=True)),
                ('last_visit', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
